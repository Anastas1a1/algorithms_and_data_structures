import time
import sys


class TreeNode(object):
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
        self.height = 0

class AVLTree(object): 
    def __init__(self):
        self.root = None    
         
    def height(self, node):
                 
        if node is None:
            return -1
                 
        else:
            return node.height
        
    def left_left_rotate(self, node):
        k1 = node.left        
        node.left = k1.right
        k1.right = node         
        node.height = max(self.height(node.right), self.height(node.left)) + 1        
        k1.height = max(self.height(k1.left), node.height) + 1     
        return k1
    
        
    def right_right_rotate(self, node):
        k1 = node.right      
        node.right = k1.left         
        k1.left = node       
        node.height = max(self.height(node.right), self.height(node.left)) + 1       
        k1.height = max(self.height(k1.right), node.height) + 1
        return k1
        
    def right_left_rotate(self, node):      
        node.right = self.left_left_rotate(node.right)
        return self.right_right_rotate(node)

    def left_right_rotate(self, node):         
        node.left = self.right_right_rotate(node.left)
        return self.left_left_rotate(node)
         
         
    def insert(self, key):        
        if not self.root:
            self.root = TreeNode(key)   
        else:
            self.root = self._insert(key, self.root)
         
    def _insert(self, key, node):        
        if node is None:
            node = TreeNode(key)
                 
        elif key < node.data:             
            node.left = self._insert(key, node.left)          
            if (self.height(node.left) - self.height(node.right)) == 2:
                if key < node.left.data:
                    node = self.left_left_rotate(node)                 
                else:
                    node = self.left_right_rotate(node)
                 
        elif key > node.data:            
            node.right = self._insert(key, node.right) 
            if (self.height(node.right) - self.height(node.left)) == 2:
                if key > node.right.data:
                    node = self.right_right_rotate(node)
                else:
                    node = self.left_right_rotate(node)
        node.height = max(self.height(node.right), self.height(node.left)) + 1
        return node
    def show_tree(self, node, n):
        if node is None:
            return -1
        self.show_tree(node.right, n + 4)
        #for i in range(0, n):
        print(' '*n, node.data),
        #print();
        self.show_tree(node.left, n + 4);
    
    inO = ' '
    preO = ' '
    postO = ' '    
         
    def preOrder(self, node):
        if node is not None:
             self.preO += str(node.data) + ' '
             self.preOrder(node.left)
             self.preOrder(node.right)
             
    def postOrder(self, node):
        if node is not None:
             self.postOrder(node.left)
             self.postOrder(node.right)
             self.postO += str(node.data) + ' '

    def inOrder(self, node):
        if node is not None:
             self.inOrder(node.left)
             self.inO += str(node.data) + ' '
             self.inOrder(node.right)



class summa():
    sys.setrecursionlimit(3000)
    sr = 0
    def recurs(self, i):
        if i < 1:
            return self.sr
        else:
            self.sr+=i
            self.recurs(i-1)
        return self.sr
            
def inter(i):
    si = 0
    while i > 0:
        si+=i
        i-=1
    return si


            

menu = "4"
while menu != "3":
    print('\n1 - Построение и обходы дерева \n2 - Вычисление суммы\n3 - Выход\n')    
    menu = input()

    match menu:
        case "1":
            print('Введите значения узлов дерева через пробел:')
            n = list(map(int,input().split()))
            n.sort()
            Tree = AVLTree()
            for i in range(len(n)):
                Tree.insert(n[i])
            Tree.preOrder(Tree.root)
            Tree.postOrder(Tree.root)
            Tree.inOrder(Tree.root)
            print('Инфиксный обход: ' + Tree.inO)
            print('Префиксный обход: ' + Tree.preO)
            print('Постфиксный обход: '+Tree.postO)
            Tree.show_tree(Tree.root, len(n))
        case "2":
            sum = summa()
            i=11000
            while i>10000:
                print('Теперь считаем сумму всех натуральных чисел до заданного, введите число не больше 2000:')
                i = int(input())
                if i > 10000:
                    print('Бери меньше')
                else: break
            j = i
            start_time = time.time_ns()
            print(str(sum.recurs(i)))
            #rec_timer = time.time_ns() - start_time
            print('(Выполнено за ' + str(time.time_ns() - start_time) + ' наносекунд)')
            i = j
            start_time1 = time.time_ns()
            print(str(inter(i)))
            #res_inter = time.time_ns() - start_time
            print('(Выполнено за ' + str(time.time_ns() - start_time1) + ' наносекунд)')
        case "3":
            break
            #print(str(time.time_ns() - start_time1))
        case _:
            print('Введите 1 или 2, чтобы выбрать')
    time.sleep(2)
