import math
import sys

def out_m(matrix):
    N=len(matrix)
    M = len(matrix[0])

    data = [[v for v in range(M)] for u in range(N)] 
    for i in range(0, N):
        for j in range(0, M):
            if matrix[i][j] == 0:
                data[i][j] = ' '
            elif matrix[i][j]== -1:
                data[i][j] = '&'
            elif matrix[i][j] == 1:
                data[i][j] = '*'
            else:
                data[i][j] = matrix[i][j]
            if j == M-1:
                data[i][j] +='|'
                
    print('_'*2*M)
    for i in data:
        print (*i)
    print('_'*2*M)


def wave2(x, y, cur, n, m, lab):
    sys.setrecursionlimit(1000)
    lab[x][y] = cur
    if y + 1 < m:
        if lab[x][y + 1] == 0 or (lab[x][y + 1] != -1 and lab[x][y + 1] > cur):
            wave2(x, y + 1, cur + 1, n, m, lab)
    if x + 1 < n:
        if lab[x + 1][y] == 0 or (lab[x + 1][y] != -1 and lab[x + 1][y] > cur):
            wave2(x + 1, y, cur + 1, n, m, lab)
    if x - 1 >= 0:
        if lab[x - 1][y] == 0 or (lab[x - 1][y] != -1 and lab[x - 1][y] > cur):
            wave2(x - 1, y, cur + 1, n, m, lab)
    if y - 1 >= 0:
        if lab[x][y - 1] == 0 or (lab[x][y - 1] != -1 and lab[x][y - 1] > cur):
            wave2(x, y - 1, cur + 1, n, m, lab)

    return lab


def  first_wave(matrix, x1, y1, x2, y2):
    sys.setrecursionlimit(1000)
    lab = []
    for i in range(len(matrix)):
        lab.append([])
        for j in range(len(matrix[0])):
            lab[i].append(matrix[i][j])

    for i in range(len(lab)):
        lab[i].insert(0, -1)
        lab[i].append(-1)
    lab.insert(0, [-1] * len(lab[0]))
    lab.append([-1] * len(lab[0]))

    x1 += 1
    y1 += 1

    mx = wave2(x1, y1, 1, len(lab), len(lab[0]), lab)

    if mx[x2][y2] != 0:
        i = x2
        j = y2
        cnt = mx[x2][y2] - 1
        while i != x1 or j != y1:
            if mx[i - 1][j] == cnt:
                i -= 1
            elif mx[i][j + 1] == cnt:
                j += 1
            elif mx[i + 1][j] == cnt:
                i += 1
            elif mx[i][j - 1] == cnt:
                j -= 1
            matrix[i][j] = 1
            cnt -= 1
    else:
        return

    #matrix[x1][y1] = ''
    #matrix[x2][y2] = 'B'
    x1 -= 1
    y1 -= 1

    matrix[x1][y1] = 'A'
    matrix[x2][y2] = 'B'

    return matrix





def ray2(mx, alpha, beta, x1, y1, x2, y2):
    x_start = x1
    y_start = y1
    x_end = x2
    y_end = y2

    if alpha == beta == 0:
        while x1 != x_end or y1 != y_end:  
            if mx[x1 + 1][y1] == 0:  
                x1 += 1
                mx[x1][y1] = 1
            elif mx[x1][y1 + 1] == 0: 
                y1 += 1
                mx[x1][y1] = 1
            else:
                break

        while x2 != x_start or y2 != y_start:  
            if mx[x2 - 1][y2] == 0:  
                x2 -= 1
                mx[x2][y2] = 1
            elif mx[x2][y2 - 1] == 0:  
                y2 -= 1
                mx[x2][y2] = 1
            else:
                break

    elif alpha == 1 and beta == 0:
        while x1 != x_end or y1 != y_end:  
            if mx[x1 - 1][y1] == 0:  
                x1 -= 1
                mx[x1][y1] = 1
            elif mx[x1][y1 + 1] == 0:  
                y1 += 1
                mx[x1][y1] = 1
            else:
                break

        while x2 != x_start or y2 != y_start:  
            if mx[x2 + 1][y2] == 0:  
                x2 += 1
                mx[x2][y2] = 1
            elif mx[x2][y2 - 1] == 0: 
                y2 -= 1
                mx[x2][y2] = 1
            else:
                break
    elif alpha == 0 and beta == 1:
        while x1 != x_end or y1 != y_end: 
            if mx[x1 + 1][y1] == 0:  
                x1 += 1
                mx[x1][y1] = 1
            elif mx[x1][y1 - 1] == 0:  
                y1 -= 1
                mx[x1][y1] = 1
            else:
                break

        while x2 != x_start or y2 != y_start: 
            if mx[x2 - 1][y2] == 0:  
                x2 -= 1
                mx[x2][y2] = 1
            elif mx[x2][y2 + 1] == 0: 
                y2 += 1
                mx[x2][y2] = 1
            else:
                break

    else:
        while x1 != x_end or y1 != y_end: 
            if mx[x1 - 1][y1] == 0: 
                x1 -= 1
                mx[x1][y1] = 1
            elif mx[x1][y1 - 1] == 0: 
                y1 -= 1
                mx[x1][y1] = 1
            else:
                break

        while x2 != x_start or y2 != y_start: 
            if mx[x2 + 1][y2] == 0: 
                x2 += 1
                mx[x2][y2] = 1
            elif mx[x2][y2 + 1] == 0:
                y2 += 1
                mx[x2][y2] = 1
            else:
                break

    return mx


def ray1(matrix, x1, y1, x2, y2):
    mx = []
    for i in range(len(matrix)):
        mx.append([])
        for j in range(len(matrix[0])):
            mx[i].append(matrix[i][j])

    if x1 - x2 >= 0:
        alpha = 1
    else:
        alpha = 0
    if y1 - y2 >= 0:
        beta = 1
    else:
        beta = 0
    for i in range(len(mx)):
        mx[i].insert(0, -1)
        mx[i].append(-1)
    mx.insert(0, [-1] * len(mx[0]))
    mx.append([-1] * len(mx[0]))
    x1 += 1
    x2 += 1
    y1 += 1
    y2 += 1

    mx = ray2(mx, alpha, beta, x1, y1, x2, y2)

    mx[x1][y1] = 'A'
    mx[x2][y2] = 'B'

    mx2 = [[]]
    for i in range(1, len(mx) - 1):
        mx2.append([])
        for j in range(1, len(mx[0]) - 1):
            mx2[i].append(mx[i][j])
    mx2.remove(mx2[0])
    return mx2



def four_ray2(mx, x, y):
    sys.setrecursionlimit(1000)
    wide = len(mx[0])
    high = len(mx)
    cross = []

    for i in range(x - 1, -1, -1):
        if mx[i][y] == 0:
            mx[i][y] = 1
        elif mx[i][y] > 0:
            cross.append((i, y))
            break
        else:
            break

    for i in range(y - 1, -1, -1):
        if mx[x][i] == 0:
            mx[x][i] = 1
        elif mx[x][i] > 0:
            cross.append((x, i))
            break
        else:
            break

    for i in range(y + 1, wide):
        if mx[x][i] == 0:
            mx[x][i] = 1
        elif mx[x][i] > 0:
            cross.append((x, i))
            break
        else:
            break

    for i in range(x + 1, high):
        if mx[i][y] == 0:
            mx[i][y] = 1
        elif mx[i][y] > 0:
            cross.append((i, y))
            break
        else:
            break

    return mx, cross

def four_ray1(mx, x1, y1, x2, y2):
    sys.setrecursionlimit(1000)
    mx = four_ray2(mx, x1, y1)
    mx = four_ray2(mx, x2, y2)
    mx[x1][y1], mx[x2][y2] = 'A', 'B'

    return mx

def go(mx, x1, y1, x2, y2, count):
    sys.setrecursionlimit(1000)
    if x1 == x2 and y1 == y2:
        return mx
    if count > len(mx) * len(mx[0]):
        return mx
    d = []

    if mx[x1 - 1][y1 - 1] == 0:
        d.append(abs((x1 - 1) - x2) + abs((y1 - 1) - y2))
    else:
        d.append(math.inf)

    if mx[x1 - 1][y1] == 0:
        d.append(abs((x1 - 1) - x2) + abs(y1 - y2))
    else:
        d.append(math.inf)

    if mx[x1 - 1][y1 + 1] == 0:
        d.append(abs((x1 - 1) - x2) + abs((y1 + 1) - y2))
    else:
        d.append(math.inf)

    if mx[x1][y1 + 1] == 0:
        d.append(abs(x1 - x2) + abs((y1 + 1) - y2))
    else:
        d.append(math.inf)

    if mx[x1 + 1][y1 + 1] == 0:
        d.append(abs((x1 + 1) - x2) + abs((y1 + 1) - y2))
    else:
        d.append(math.inf)

    if mx[x1 + 1][y1 - 1] == 0:
        d.append(abs((x1 + 1) - x2) + abs(y1 - y2))
    else:
        d.append(math.inf)

    if mx[x1 - 1][y1 - 1] == 0:
        d.append(abs((x1 + 1) - x2) + abs((y1 - 1) - y2))
    else:
        d.append(math.inf)

    if mx[x1][y1 - 1] == 0:
        d.append(abs(x1 - x2) + abs((y1 - 1) - y2))
    else:
        d.append(math.inf)

    opt = d.index(min(d))

    match opt:
        case 0:
            a = x1 - 1
            b = y1 - 1
        case 1:
            a = x1 - 1
            b = y1   
        case 2:
            a = x1 - 1
            b = y1 + 1  
        case 3:
            a = x1
            b = y1 + 1 
        case 4:
            a = x1 + 1
            b = y1 + 1  
        case 5:                                    
            a = x1 + 1
            b = y1 - 1  
        case 6:
            a = x1 - 1
            b = y1 - 1
        case _:
            a = x1
            b = y1 - 1                              

    mx[a][b] = 1
    count += 1
    mx = go(mx, a, b, x2, y2, count)
    return mx

def route(matrix, x1, y1, x2, y2):
    sys.setrecursionlimit(1000)
    mx = []
    x1 += 1
    x2 += 1
    y1 += 1
    y2 += 1
    for i in range(len(matrix)):
        mx.append([])
        for j in range(len(matrix[0])):
            mx[i].append(matrix[i][j])

    for i in range(len(mx)):
        mx[i].insert(0, -1)
        mx[i].append(-1)
    mx.insert(0, [-1] * len(mx[0]))
    mx.append([-1] * len(mx[0]))

    mx = go(mx, x1, y1, x2, y2, 0)

    mx[x1][y1] = 'A'
    mx[x2][y2] = 'B'
    mx2 = [[]]
    for i in range(1, len(mx) - 1):
        mx2.append([])
        for j in range(1, len(mx[0]) - 1):
            mx2[i].append(mx[i][j])
    mx2.remove(mx2[0])

    return mx2

def timetable(lst):
    tasks = {1: [], 2: [], 3: [], 4: []}
    lst.sort(reverse=True)
    proc = lst[0:4]
    for i in range(4):
        tasks[i + 1].append(lst[i])
    del lst[0:4]
    while len(lst) != 0:
        mn = min(proc)
        for i in range(4):
            if proc[i] == 0 and len(lst) > 0:
                proc[i] = lst[0]
                tasks[i + 1].append(lst[0])
                del lst[0]
            proc[i] -= mn
            
    time = max(sum(tasks[1]), sum(tasks[2]), sum(tasks[3]), sum(tasks[4]))

    return tasks, time


def read_f():
    with open('labirint.txt') as f:
        matrix = [list(map(int, row.split())) for row in f.readlines()]
    return matrix

if __name__ == '__main__':
    menu = "6"
    while menu != "7":
        print("\n1 - Волновой алгоритм \n2 - Двухлучевой алгоритм\n3 - Четырехлучевой алгоритм",
              "\n4 - Маршрутный алгоритм\n5 - Алгоритм оптимальной упаковки\n6 - Алгоритм составления расписания\n7 - Выход\n")    
        menu = input()

        match menu:
            case "1":
                matr = read_f()
                out_m(matr)
                N = len(matr)
                M = len(matr[0])
                x, y = list(map(int,input('Введите координаты начальной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                x1, y1 = list(map(int,input('Введите координаты конечной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                if x < 1  or x> N or x1 < 1 or x1 > N or y<1 or y1<1 or y1> M or y> M or x1==None or y1==None:
                    print('Ввод некорректен')
                else:
                    res = first_wave(matr, x-1, y-1, x1-1, y1-1)
                    out_m(res)
            case "2":
                matr = read_f()
                out_m(matr)
                N = len(matr)
                M = len(matr[0])
                x, y = list(map(int,input('Введите координаты начальной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                x1, y1 = list(map(int,input('Введите координаты конечной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                if x < 1  or x> N or x1 < 1 or x1 > N or y<1 or y1<1 or y1> M or y> M:
                    print('Ввод некорректен')
                else:
                    res = ray1(matr, x-1, y-1, x1-1, y1-1)
                    out_m(res)
            case "3":
                matr = read_f()
                out_m(matr)
                N = len(matr)
                M = len(matr[0])
                x, y = list(map(int,input('Введите координаты начальной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                x1, y1 = list(map(int,input('Введите координаты конечной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                if x < 1  or x> N or x1 < 1 or x1 > N or y<1 or y1<1 or y1> M or y> M:
                    print('Ввод некорректен')
                else:
                    mx= four_ray1(matr, x-1, y-1, x1-1, y1-1)
                    out_m(mx)
            case "4":
                    matr = read_f()
                    out_m(matr)
                    N = len(matr)
                    M = len(matr[0])
                    x, y = list(map(int,input('Введите координаты начальной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                    x1, y1 = list(map(int,input('Введите координаты конечной точки (x от 1 до {}, y от 1 до {}) : '.format(N, M)).split()))
                    if x < 1  or x> N or x1 < 1 or x1 > N or y<1 or y1<1 or y1> M or y> M:
                        print('Ввод некорректен')
                    else:
                        mx = route(matr, x-1, y-1, x1-1, y1-1)
                        out_m(mx)
            case "5":
                weights = list(map(int, input('Введите веса предметов, которые нужно упаковать: ').split()))
                max_v = int(input('Введите максимальный вес для коробки:'))
         
                res = 0
                more_max = []
                
                const_mv = max_v
                for weight in weights:
                    if max_v >= weight:
                        max_v = max_v - weight
                    elif const_mv < weight:
                        more_max.append(weight)
                    else:
                        res += 1
                        max_v = const_mv - weight
                if more_max is None:
                     print('Для упаковки понадобится {} коробок'.format(res+1))
                # else:
                #     print('Слишком большой вес, потребуется ещё', len(more_max), 'короб(ка/ки/ок) побольше, либо тащи {} кг в руках'. format(sum(more_max)))
                #     print('Для остального потребуется {} коробок(а)'.format(res+1))
            case "6":
                lst = list(map(int, input('Введите времена выполнения задач: ').split()))
                tasks, time = timetable(lst)
                print("Всего понадобится времени: ", time)
                for i in tasks:
                    # print('\t', end='')
                    print(i, 'процессор :', *tasks[i])
            case "7":
                break
            case _:
                print('Плохой выбор, давай по новой...')       
                
